
11.anotherDP

Base case 1: Smallest(l) = 0, if l == 0;
Base case 2: Smallest(l) = (A[1])^2, if l == 1;
General case: Smallest(l) = min(0≤k<l){Smallest(k) + (A[k+1] + ... + A[l])^2}, otherwise;







11.50 Dynamic Programming, lifting

a) 
We need two specifications. One for when the root is blue, and one for green. Each has different base cases too.

// case blue
Base: Bbest(T) = T.dat if T is a leaf;
General: Bbest(T) = Sum(v in Child[T])[Gbest(v)], otherwise;

// case green
Base: Gbest(T) = 0 if T is a leaf;
General: Gbest(T) = Sum(v in Child[T])[max{Bbest(v), Gbest(v)}], otherwise;

// main drive
MaxV(T) = max{Bbest(T), Gbest(T)};




b)
After we compute the Bbest and Gbest value of each vertex for the first time, we store it in the Data[1...n]array so that our next reference could just use that corresponding value and just do the comparison.




c)
Read(n);
Create the empty array of child lists children[1...n];
Let 1 be the root of the tree;
Creat the global array Data[1...n] where each Data[i] has the three fields .dat, .Bbest, and .Gbest;
for i <- 1 to n do Read Data[i].dat endfor;
for i <- 1 to n do Data[i].Bbest <- Nil endfor;
for i <- 1 to n do Data[i].Gbest <- Nil endfor;
print(max{Bbest(1), Gbest(1)});

function Bbest(T);
    if T is a leaf then return T.dat;
    else
        if Data[T].Bbest == Nil then
            sum <- 0;
            for v in Child[T] do
                Gtemp <- Data[v].Gbest;
                if Gtemp <- Nil then {We have not calculated Gbest(v) yet}
                    Gtemp <- Gbest(v);
                    sum <- sum + Gtemp;
                    Data[v].Gbest <- Gtemp; {store the answer}
                endif;
            endfor;
        endif;
        Data[T].Bbest <- sum;
        return sum;
    endif;
end_Bbest;

function Gbest(T);
    if T is a leaf then return 0;
    else
        if Data[T].Gbest == Nil then
            sum <- 0;
            for v in Child[T] do
                Gtemp <- Data[v].Gbest;
                Btemp <- Data[v].Bbest;
                if Gtemp <- Nil then {We have not calculated Gbest(v) yet}
                    Gtemp <- Gbest(v);
                    Data[v].Gbest <- Gtemp; {store the answer}
                endif;
                if Btemp <- Nil then {We have not calculated Bbest(v) yet}
                    Btemp <- Bbest(v);
                    Data[v].Bbest <- Btemp; {store the answer}
                endif;
                if Gtemp ≥ Btemp then sum <- sum + Gtemp;
                else sum <- sum + Btemp endif;
            endfor;
        endif;
        Data[T].Gbest <- sum;
        return sum;
     endif;
end_Gbest;





5.Graph

We can use a simplified version of bucket sort and the Paige-Tarjan lexicographical sort algorithm to sort edges in the Adj[n] array.

First, use the PT algorithm to store all parent-child pairs in the parents Adjacency array. 

The second pass uses bucket sort, and places (parent, child) pairs into the child bucket.

Lastly, put each pair back to the parents' Adjacency array in order of the buckets. Since the buckets are sorted, the pairs will be sorted.





5.40 a) Analyzing Mergesort

T(n) = l * n + 2 * r + 2^l





6.5 

insert picture



6insertdelete.a

insert picture



6insertdelete.b

insert picture

6insertdelete.c

insert picture




6.10 2-3trees

a)
On the path from the root of the 2-3 tree down to the vertex that would become the parent of the leaf-records x (if no splitting were to occur), each vertex would have exactly 3 child vertices. In this way, when the leaf is added, it would push out its siblings and force each parent level to split up, causing the root to be divided into two, and creating a new root.




6.range

a. Insert(x): insert the key x and increment the count value stored in all vertices on the path from the root to this new vertex by 1.

b. Locate(x): will just compare the value x with the left and right guilds at each vertex along the way. Since the left guide stores the smallest node in the center partition for 3-child structures and in the right partition for 2-child structures, Locate(x) will easily find which partition it should enter, and save time from testing in other partitions.

c. Delete(x): as Delete(x) traverses from root to the vertex, decrement the count value by 1 from all vertices along the way.

d. CountLessThan(x): would simply add the count values in the path, subtracting its right sibling counts at the leaf level.





6.intervals

Under an interval 2-3 tree structure, each interval (a,b) will be stored as pairs. A differentpair (r,s) will be considered smaller than (a,b) if either r < a or r = a and s < b.

This covers the locate function. As for add and delete, it is similar to the regular 2-3 tree, where each pair is treated as a vertex.



6.intervalstabs


To calculate stab(x), we need to consider two factors. As the hint suggests, the number of intervals that are "alive" are:

1. born before or at x (a ≤ x)
2. did not die before x (b > x)

As such, the precise number is the number of intervals born before or at x, minus those that died before x. Therefore, it is the vertices in the interval 2-3 tree that are to the left of the would-be (a, x) vertex.




8.qqq

a)
insert picture here

We apply the FW algorithm to the supergraph and focus on the upper right quadrant. This entails that all paths have to start from G1, undergo some number of redges, go into G2 from one of the redges (fulfills the R+ requirement), undergo some number of wedges, go into G3 using one of the wedges (W+), undergo some bedges, go into G4 using one bedge (B+), and finally end at G4.





b)
(4n)^3 + O(4n)^2



c)
Solve the subproblems of R+W+ first using the 2-step algorithm, and then apply that again to solve the (R+W+)B+ problem.





d)
2n^3 + O(n^2)








11.14 Divide and conquer


